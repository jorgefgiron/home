#!/bin/bash

# Copyright (c) 2017 rehashedsalt/vintagesalt
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

if [ "$XDG_DATA_HOME" = "" ]; then
	cachefile="$HOME/.local/share/mpv-wrapcache"
else
	cachefile="$XDG_DATA_HOME/mpv-wrapcache"
fi

if ! [ -f "$cachefile" ]; then
	touch $cachefile
fi

cachecontent="$(cat $cachefile)"

function video-play {
	notify-send -u low -t 10 -a 'MPV' "Embedded Video" "Playing $1 as a stream embedded in the desktop"
	pkill mpv
	xwinwrap -ni -fs -b -nf -ov -- mpv -wid WID $1
	return 0
}

function video-validate {
	if [[ "$(curl -Is $1 | head -1)" = *"200"* ]] && [[ "$1" = *"youtu"* ]]; then
		return 0
	fi
	return 1
}

function cache-add {
	if [[ "$cachecontent" == *"$1"* ]]; then
		return 0
	fi
	name="$(youtube-dl -e $1)"
	printf "$name\n$1\n" >> $cachefile
	return 0
}

function cache-populate {
	names="$(awk -F'\n' 'BEGIN{RS="\n\n"} {for (i=1;i<=NF;i+=2) print $i}' $cachefile)"
	printf "$names"
	return 0
}

function cache-lookup-by-name {
	url="$(awk -v URL="$1" -F'\n' 'BEGIN{RS="\n\n"} {for (i=1;i<=NF;i++) if (index($i, URL)) print $(i+1)}' $cachefile)"
	if [ "$url" = "" ]; then
		return 1
	fi
	printf "$url"
	return 0
}

function input-get {
	cache-populate | rofi -dmenu -p 'Embed video: '
	return 0
}

input="$(input-get | tr -d '\n')"
printf "Input: $input\n"

if cache-lookup-by-name "$input"; then
	printf "Lookup successful: "
	input="$(cache-lookup-by-name "$input")"
	printf "\n"
fi

if ! video-validate $input; then
	printf "Not a valid stream: $input\n"
	exit 1
fi

cache-add $input
video-play $input

exit 0
